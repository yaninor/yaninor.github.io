<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一名网友的blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/yaninor/"/>
  <updated>2019-01-12T08:38:29.001Z</updated>
  <id>https://github.com/yaninor/</id>
  
  <author>
    <name>yaninor</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用canvas制作一个简单的随机验证码</title>
    <link href="https://github.com/yaninor/2019/01/12/canvas%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://github.com/yaninor/2019/01/12/canvas验证码/</id>
    <published>2019-01-12T08:35:15.000Z</published>
    <updated>2019-01-12T08:38:29.001Z</updated>
    
    <content type="html"><![CDATA[<hr><p>现在验证码在网页表单中几乎是标配，用来防止机器人攻击网站，今天我们就用canvas和js来写一个简单的随机二维码。<br><a id="more"></a></p><h4 id="制作思路"><a href="#制作思路" class="headerlink" title="制作思路"></a>制作思路</h4><p>大家知道canvas是HTML5里面的新特性，可以用来绘图，配合js可以绘制出各种各样的图案。验证码一般由数字或字母组成，再加上一些视觉干扰的元素，防止机器人识别。而canvas可以绘制文字及线条，还可以做一些旋转处理，利用这些特性我们就可以做出一个简单的随机验证码。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"30"</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">placeholder</span>=<span class="string">"请输入验证码"</span> <span class="attr">id</span>=<span class="string">"input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"check()"</span>&gt;</span>验证<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ctx=c.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">ctx.fillStyle=<span class="string">"#BFEFFF"</span>;<span class="comment">//绘制背景颜色</span></span></span><br><span class="line"><span class="undefined">ctx.fillRect(0,0,160,30);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//随机产生4个字符</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> chars = [];</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">chars.push(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">9</span>).toString());</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">ctx.font=<span class="string">"20px Verdana"</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> x = <span class="number">15</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> colors = [<span class="string">'red'</span>,<span class="string">'yellow'</span>,<span class="string">'blue'</span>,<span class="string">'green'</span>,<span class="string">'pink'</span>,<span class="string">'black'</span>];</span></span><br><span class="line"><span class="javascript"><span class="comment">//绘制4个字符</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">ctx.fillStyle = colors[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">5</span>)];</span></span><br><span class="line"><span class="undefined">ctx.fillText(chars[i],x,25);</span></span><br><span class="line"><span class="undefined">x = x + 40;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//对图案随机加入线条造成干扰</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> lineNumber = <span class="number">5</span>; <span class="comment">// 线条条数</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> lineX = <span class="number">160</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> lineY = <span class="number">30</span>;  <span class="comment">// 最大线条坐标</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; lineNumber;i++)&#123;</span></span><br><span class="line"><span class="javascript">ctx.strokeStyle = colors[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">5</span>)];</span></span><br><span class="line"><span class="undefined">ctx.beginPath();</span></span><br><span class="line"><span class="javascript">ctx.moveTo(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*lineX),<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*lineY));</span></span><br><span class="line"><span class="javascript">ctx.lineTo(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*lineX),<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*lineY));</span></span><br><span class="line"><span class="undefined">ctx.stroke();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 点击按钮验证</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>).value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(input === chars.join(<span class="string">''</span>))&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">"验证成功"</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">'验证失败'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后的效果：（每一次刷新后的图案都是不同的）<br><img src="https://github.com/RaHsu/note/raw/master/img/jietu.png" alt="最后效果"></p><p>当然这里使用的是数字，你也可使用字母或数字字母混用。在干扰方面，你还可以加上旋转，缩放，虚化等等，这些效果用canvas同样可以实现。</p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;现在验证码在网页表单中几乎是标配，用来防止机器人攻击网站，今天我们就用canvas和js来写一个简单的随机二维码。&lt;br&gt;
    
    </summary>
    
      <category term="css3" scheme="https://github.com/yaninor/categories/css3/"/>
    
    
      <category term="html5" scheme="https://github.com/yaninor/tags/html5/"/>
    
      <category term="css3" scheme="https://github.com/yaninor/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>炫酷的canvas粒子特效</title>
    <link href="https://github.com/yaninor/2019/01/12/canvas/"/>
    <id>https://github.com/yaninor/2019/01/12/canvas/</id>
    <published>2019-01-12T08:31:36.000Z</published>
    <updated>2019-01-12T08:33:06.754Z</updated>
    
    <content type="html"><![CDATA[<hr><p>随着html5<code>Canvas</code>元素的推出呢，现在的浏览器具备了更强大的绘制图像的功能，甚至<code>canvas</code>已经可以用来制作大型网页游戏，关于<code>Canvas</code>的js库也越来越多，有动画库还有图表库比如Echart等等。今天我就要给大家推荐两款非常炫酷的<code>Canvas</code>粒子特效，let’s hit the road!</p><h3 id="Particleground粒子背景"><a href="#Particleground粒子背景" class="headerlink" title="Particleground粒子背景"></a>Particleground粒子背景</h3><p>articleground是一款时髦的jquery粒子系统背景插件，PC端可通过鼠标控制视差效果，而移动端可用重力感应控制，Particleground可以运行在任何支持html5 canvas的浏览器上。</p><p>大家可以先<a href="http://jnicol.github.io/particleground/" target="_blank" rel="noopener">看看效果</a>。</p><p>怎么样是不是很炫酷！！那么要使用这个特效也是非常的简单。</p><p>首先放上项目的<a href="https://github.com/jnicol/particleground">github地址</a>。把代码clone下来到本地。然后引入它。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'jquery-3.0.0.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'jquery.particleground.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意这个组件是基于jQuery的，所以在你也需要引入JQuery文件。</p><p>然后在html里面添加一个Canvas容器：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"particles"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最后在js中将它初始化：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#particles'</span>).particleground();</span><br></pre></td></tr></table></figure></p><p>这样你的设置就完成了</p><p>当然你也可以设置参数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#particles'</span>).particleground(&#123;</span><br><span class="line">dotColor: <span class="string">'#ff0000'</span>,    <span class="comment">// 点的颜色</span></span><br><span class="line">lineColor: <span class="string">'#ff0000'</span>   <span class="comment">//  线的颜色</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>更多具体的参数请参阅官方文档。</p><h3 id="canvas-nest-js粒子背景"><a href="#canvas-nest-js粒子背景" class="headerlink" title="canvas-nest.js粒子背景"></a>canvas-nest.js粒子背景</h3><p>接下来是另一款粒子背景，它和上面的 Particleground 有些不一样，粒子并不是随机分散的而是聚集在鼠标的周围，这样可以很清除的反应鼠标的位置。</p><p><a href="http://www.atool.org/" target="_blank" rel="noopener">在这里</a>查看背景预览。</p><p>使用这款组件非常的容易，只需要在你的页面中加入这段代码即可（注意要放在body里面）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.1/canvas-nest.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>是不是异常的简单！！</p><p>当然你也可以下载文件到本地，<a href="https://github.com/hustcc/canvas-nest.js">这里</a>是项目的地址。</p><p>同样的你可以设置动画参数，只需要在script标签里面添加就行了，像这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">color</span>=<span class="string">"0,0,255"</span> <span class="attr">opacity</span>=<span class="string">'0.7'</span> <span class="attr">zIndex</span>=<span class="string">"-2"</span> <span class="attr">count</span>=<span class="string">"99"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.1/canvas-nest.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面的参数分别是线条颜色、线条透明度、z轴值、以及粒子个数。</p><p>更多的参数请参阅项目文档。</p><p>要提醒一点的是，不管你使用哪个组件，不要将粒子的数量设置得太多，这样浏览器的性能会跟不上，毕竟图像绘制还是很吃性能的，浏览器甚至还会崩溃卡死。</p><p>好了，就介绍到这里了，祝各位小伙伴玩得愉快哦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;随着html5&lt;code&gt;Canvas&lt;/code&gt;元素的推出呢，现在的浏览器具备了更强大的绘制图像的功能，甚至&lt;code&gt;canvas&lt;/code&gt;已经可以用来制作大型网页游戏，关于&lt;code&gt;Canvas&lt;/code&gt;的js库也越来越多，有动画库还有图表库比如
      
    
    </summary>
    
      <category term="css3" scheme="https://github.com/yaninor/categories/css3/"/>
    
    
      <category term="html5" scheme="https://github.com/yaninor/tags/html5/"/>
    
      <category term="css3" scheme="https://github.com/yaninor/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习笔记-Set和Map</title>
    <link href="https://github.com/yaninor/2019/01/12/ES6%E7%9A%84set%E5%92%8Cmap/"/>
    <id>https://github.com/yaninor/2019/01/12/ES6的set和map/</id>
    <published>2019-01-12T08:28:17.000Z</published>
    <updated>2019-01-12T08:30:25.957Z</updated>
    
    <content type="html"><![CDATA[<p>大家知道，在ES5中，我们拥有两种数据数据结构，Array和Object。但是它们的功能还不够全面。于是在ES6中又为我们提供了两个新的数据结构，Set和Map。<br><a id="more"></a></p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set 本身是一个构造函数，用来生成 Set 数据结构。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>].forEach(<span class="function"><span class="params">x</span> =&gt;</span> s.add(x));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 3 5 4</span></span><br></pre></td></tr></table></figure></p><p>上面代码通过<code>add</code>方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。</p><p>Set 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">[...set]</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]);</span><br><span class="line">items.size <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例三</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divs</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...document.querySelectorAll(<span class="string">'div'</span>)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(divs());</span><br><span class="line">set.size <span class="comment">// 56</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似于</span></span><br><span class="line">divs().forEach(<span class="function"><span class="params">div</span> =&gt;</span> set.add(div));</span><br><span class="line">set.size <span class="comment">// 56</span></span><br></pre></td></tr></table></figure><p>上面代码中，也展示了一种去除数组重复成员的方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去除数组的重复成员</span></span><br><span class="line">[...new <span class="built_in">Set</span>(array)]</span><br></pre></td></tr></table></figure></p><p>向 Set 加入值的时候，不会发生类型转换，所以<code>5</code>和<code>&quot;5&quot;</code>是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value equality”，它类似于精确相等运算符（<code>===</code>），主要的区别是<code>NaN</code>等于自身，而精确相等运算符认为<code>NaN</code>不等于自身。</p><p>要注意的是，两个对象总是被认为是不相等的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">set.add(&#123;&#125;);</span><br><span class="line">set.size <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">set.add(&#123;&#125;);</span><br><span class="line">set.size <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>上面代码表示，由于两个空对象不相等，所以它们被视为两个值。</p><h4 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h4><p>WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。</p><p>首先，WeakSet 的成员只能是对象，而不能是其他类型的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line">ws.add(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used in weak set</span></span><br><span class="line">ws.add(<span class="built_in">Symbol</span>())</span><br><span class="line"><span class="comment">// TypeError: invalid value used in weak set</span></span><br></pre></td></tr></table></figure></p><p>其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。</p><p>为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> o = &#123;<span class="attr">p</span>: <span class="string">'Hello World'</span>&#125;;</span><br><span class="line"></span><br><span class="line">m.set(o, <span class="string">'content'</span>)</span><br><span class="line">m.get(o) <span class="comment">// "content"</span></span><br><span class="line"></span><br><span class="line">m.has(o) <span class="comment">// true</span></span><br><span class="line">m.delete(o) <span class="comment">// true</span></span><br><span class="line">m.has(o) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面的例子展示了如何向 Map 添加成员。作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'name'</span>, <span class="string">'张三'</span>],</span><br><span class="line">  [<span class="string">'title'</span>, <span class="string">'Author'</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">map.size <span class="comment">// 2</span></span><br><span class="line">map.has(<span class="string">'name'</span>) <span class="comment">// true</span></span><br><span class="line">map.get(<span class="string">'name'</span>) <span class="comment">// "张三"</span></span><br><span class="line">map.has(<span class="string">'title'</span>) <span class="comment">// true</span></span><br><span class="line">map.get(<span class="string">'title'</span>) <span class="comment">// "Author"</span></span><br></pre></td></tr></table></figure><p>事实上，不仅仅是数组，任何具有<code>Iterator</code>接口、且每个成员都是一个双元素的数组的数据结构都可以当作Map构造函数的参数。这就是说，Set和Map都可以用来生成新的 Map。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([</span><br><span class="line">  [<span class="string">'foo'</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">'bar'</span>, <span class="number">2</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="built_in">Map</span>(set);</span><br><span class="line">m1.get(<span class="string">'foo'</span>) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m2 = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'baz'</span>, <span class="number">3</span>]]);</span><br><span class="line"><span class="keyword">const</span> m3 = <span class="keyword">new</span> <span class="built_in">Map</span>(m2);</span><br><span class="line">m3.get(<span class="string">'baz'</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h4><p><code>WeakMap</code>与<code>Map</code>的区别有两点。</p><p>首先，WeakMap只接受对象作为键名（<code>null</code>除外），不接受其他类型的值作为键名。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">map.set(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: 1 is not an object!</span></span><br><span class="line">map.set(<span class="built_in">Symbol</span>(), <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as weak map key</span></span><br><span class="line">map.set(<span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as weak map key</span></span><br></pre></td></tr></table></figure></p><p>上面代码中，如果将数值<code>1</code>和<code>Symbol</code>值作为<code>WeakMap</code>的键名，都会报错。</p><p>其次，<code>WeakMap</code>的键名所指向的对象，不计入垃圾回收机制。</p><p>基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。一个典型应用场景是，在网页的 DOM 元素上添加数据，就可以使用<code>WeakMap</code>结构。当该 DOM 元素被清除，其所对应的<code>WeakMap</code>记录就会自动被移除。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家知道，在ES5中，我们拥有两种数据数据结构，Array和Object。但是它们的功能还不够全面。于是在ES6中又为我们提供了两个新的数据结构，Set和Map。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://github.com/yaninor/categories/javascript/"/>
    
    
      <category term="ES6" scheme="https://github.com/yaninor/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习笔记-箭头函数</title>
    <link href="https://github.com/yaninor/2019/01/12/ES6/"/>
    <id>https://github.com/yaninor/2019/01/12/ES6/</id>
    <published>2019-01-12T08:26:22.000Z</published>
    <updated>2019-01-12T08:30:16.288Z</updated>
    
    <content type="html"><![CDATA[<hr><p>箭头函数是ES6中一个新增的特性，今天我们就来看看它是如何使用的。<br><a id="more"></a></p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>ES6 允许使用“箭头”（=&gt;）定义函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br></pre></td></tr></table></figure></p><p>等同于<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>我们可以看到箭头前面的 v 是作为函数的参数，箭头后面的 v 是作为函数的返回值，那么箭头函数的结构差不多就明了了。</p><p>如果你不需要参数，或需要多个参数，就使用一个圆括号在参数部分，也就是箭头的前面：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>通过之前的例子我们可以知道，箭头后面的内容就是函数要返回的内容，但这仅限于函数体用一句语句就可以解决的情况，如果函数体拥有一句以上的语句，你需要将函数体中的语句用大括号括起来，并仍然需要使用<code>return</code>语句将返回值返回：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123; <span class="keyword">return</span> num1 + num2; &#125;</span><br></pre></td></tr></table></figure></p><p>如果你想要返回一个对象，必须用括号将这个对象括起来：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="function"><span class="params">x</span> =&gt;</span>(&#123; <span class="attr">id</span> : x , <span class="attr">name</span> : <span class="string">'name'</span> &#125;)</span><br></pre></td></tr></table></figure></p><p>箭头函数可以与变量解构结合使用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> full = <span class="function">(<span class="params">&#123; first, last &#125;</span>) =&gt;</span> first + <span class="string">' '</span> + last;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">full</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> person.first + <span class="string">' '</span> + person.last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="箭头函数的作用"><a href="#箭头函数的作用" class="headerlink" title="箭头函数的作用"></a>箭头函数的作用</h3><p>对于箭头函数的作用，个人认为有三点：</p><ol><li><p>箭头函数使函数的表达更为简洁。<br> 对于简单的一些功能函数，箭头函数相比于传统函数的表达更为简洁，并且代码量也更少，通常只需要一行。</p></li><li><p>简化回调函数：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 正常函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure><p> 这样使代码更加简洁也更加易读。</p></li><li><p>箭头函数可以将this对象绑定在定义时的作用域中，这种特性非常利于封装回调函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  id: <span class="string">'123456'</span>,</span><br><span class="line"></span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>,</span><br><span class="line">      event =&gt; <span class="keyword">this</span>.doSomething(event.type), <span class="literal">false</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  doSomething: <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Handling '</span> + type  + <span class="string">' for '</span> + <span class="keyword">this</span>.id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>上面代码的<code>init</code>方法中，使用了箭头函数，这导致这个箭头函数里面的<code>this</code>，总是指向<code>handler</code>对象。否则，回调函数运行时，<code>this.doSomething</code>这一行会报错，因为此时<code>this</code>指向<code>document</code>对象。</p><h3 id="使用箭头函数时要注意"><a href="#使用箭头函数时要注意" class="headerlink" title="使用箭头函数时要注意"></a>使用箭头函数时要注意</h3><ol><li>函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。</li><li>不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。</li><li>不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用 <code>rest</code>参数代替。</li><li>不可以使用<code>yield</code>命令，因此箭头函数不能用作 Generator 函数。</li></ol><p>这大概就是对箭头函数的大致介绍了，其他的还要小伙伴们自己去探索，祝大家学习愉快哦。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;箭头函数是ES6中一个新增的特性，今天我们就来看看它是如何使用的。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://github.com/yaninor/categories/javascript/"/>
    
    
      <category term="ES6" scheme="https://github.com/yaninor/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>我的php总结</title>
    <link href="https://github.com/yaninor/2019/01/12/php%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/yaninor/2019/01/12/php总结/</id>
    <published>2019-01-12T08:18:35.000Z</published>
    <updated>2019-01-12T08:39:09.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP常见错误收集"><a href="#PHP常见错误收集" class="headerlink" title="PHP常见错误收集"></a>PHP常见错误收集</h1><h5 id="Fatal-error-Non-static-method-Conn-construct-cannot-be-called-statically-in-file-php"><a href="#Fatal-error-Non-static-method-Conn-construct-cannot-be-called-statically-in-file-php" class="headerlink" title="Fatal error: Non-static method Conn::__construct() cannot be called statically in  /file.php"></a>Fatal error: Non-static method Conn::__construct() cannot be called statically in  /file.php</h5><ul><li>没有静态的方法(里面这个指方法参数，字符串类型),不能从静态上下文引用。</li></ul><h5 id="Fatal-error-operator-not-supported-for-strings-in-file-php"><a href="#Fatal-error-operator-not-supported-for-strings-in-file-php" class="headerlink" title="Fatal error:  operator not supported for strings in  /file.php"></a>Fatal error:  operator not supported for strings in  /file.php</h5><ul><li><p>当一个变量已设为非数组类型的时候，就不能再次使用[]让同名变量增加数据键值</p></li><li><p>解决方法：</p><p>  1.改变变量名称、</p><p>  2.使用$var = array(…)</p><p>  举例：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//这里为字符串类型 </span><br><span class="line">$err = $e-&gt;getMessage();</span><br><span class="line">//当执行到这里的时候会报错 </span><br><span class="line">$err[] = array ( </span><br><span class="line">&apos;gid&apos; =&gt; $this-&gt;_get[&apos;id&apos;],</span><br><span class="line">&apos;url&apos; =&gt; $new, </span><br><span class="line">&apos;log&apos; =&gt; $err, </span><br><span class="line">&apos;time&apos; =&gt; time() </span><br><span class="line">);</span><br><span class="line">?&gt;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><h5 id="Fatal-error-Declaration-of-Listing-content-must-be-compatible-with-that-of-InewsList-content-in-file-List-1-phpon-line-7"><a href="#Fatal-error-Declaration-of-Listing-content-must-be-compatible-with-that-of-InewsList-content-in-file-List-1-phpon-line-7" class="headerlink" title="Fatal error: Declaration of Listing::content() must be compatible with that of InewsList::content() in file\List_1.phpon line 7"></a>Fatal error: Declaration of Listing::content() must be compatible with that of InewsList::content() in file\List_1.phpon line 7</h5><ul><li>统一接口所有类方法都必须和接口规定的一致：作用域声明、方法名、参数数量</li></ul><h5 id="Parse-error-syntax-error-unexpected-T-NAMESPACE-expecting-T-STRING-in-file-List-1-php-on-line-42"><a href="#Parse-error-syntax-error-unexpected-T-NAMESPACE-expecting-T-STRING-in-file-List-1-php-on-line-42" class="headerlink" title="Parse error: syntax error, unexpected T_NAMESPACE, expecting T_STRING in file\List_1.php on line 42"></a>Parse error: syntax error, unexpected T_NAMESPACE, expecting T_STRING in file\List_1.php on line 42</h5><ul><li>检查语句是否闭合，例如：()、””</li><li>检查是否有命名冲突，例如：namespace</li></ul><h5 id="Fatal-error-Allowed-memory-size-of-134217728-bytes-exhausted-tried-to-allocate-6144-bytes-in-file-List-1-php-on-line-8"><a href="#Fatal-error-Allowed-memory-size-of-134217728-bytes-exhausted-tried-to-allocate-6144-bytes-in-file-List-1-php-on-line-8" class="headerlink" title="Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 6144 bytes) in file\List_1.php on line 8"></a>Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 6144 bytes) in file\List_1.php on line 8</h5><ul><li>内存超过PHP默认设置的128M</li></ul><h5 id="Notice-Undefined-property-News-matches-in-file-List-1-php-on-line-57"><a href="#Notice-Undefined-property-News-matches-in-file-List-1-php-on-line-57" class="headerlink" title="Notice: Undefined property: News::$_matches in file\List_1.php on line 57"></a>Notice: Undefined property: News::$_matches in file\List_1.php on line 57</h5><ul><li>没有找到类中的方法</li></ul><h5 id="Warning-preg-match-all-function-preg-match-all-Empty-regular-expression-in-file-List-1-php-on-line-57"><a href="#Warning-preg-match-all-function-preg-match-all-Empty-regular-expression-in-file-List-1-php-on-line-57" class="headerlink" title="Warning: preg_match_all() [function.preg-match-all]: Empty regular expression in file\List_1.php on line 57"></a>Warning: preg_match_all() [function.preg-match-all]: Empty regular expression in file\List_1.php on line 57</h5><ul><li>正则表达式为空</li></ul><h5 id="Warning-preg-match-all-function-preg-match-all-Delimiter-must-not-be-alphanumeric-or-backslash-infile-List-1-php-on-line-57"><a href="#Warning-preg-match-all-function-preg-match-all-Delimiter-must-not-be-alphanumeric-or-backslash-infile-List-1-php-on-line-57" class="headerlink" title="Warning: preg_match_all() [function.preg-match-all]: Delimiter must not be alphanumeric or backslash infile\List_1.php on line 57"></a>Warning: preg_match_all() [function.preg-match-all]: Delimiter must not be alphanumeric or backslash infile\List_1.php on line 57</h5><ul><li>判断为第一个参数的正则表达式写法有问题 记得在前面和后面加上 /  符号。</li></ul><h5 id="Warning-mysqli-query-mysqli-query-Couldn’t-fetch-Insert-in-file-php"><a href="#Warning-mysqli-query-mysqli-query-Couldn’t-fetch-Insert-in-file-php" class="headerlink" title="Warning: mysqli::query() [mysqli.query]: Couldn’t fetch Insert in /file.php"></a>Warning: mysqli::query() [mysqli.query]: Couldn’t fetch Insert in /file.php</h5><ul><li>必须使用mysqli链接数据库后返回的结果集去执行操作。</li></ul><h5 id="Warning-1064-You-have-an-error-in-your-SQL-syntax-check-the-manual-that-corresponds-to-your-MySQL-server-version-for-the-right-syntax-to-use-near…"><a href="#Warning-1064-You-have-an-error-in-your-SQL-syntax-check-the-manual-that-corresponds-to-your-MySQL-server-version-for-the-right-syntax-to-use-near…" class="headerlink" title="Warning: 1064_You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near…"></a>Warning: 1064_You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near…</h5><ul><li>网上搜索是MYSQL兼容问题，实际操作上是语法错误，需检查SQL语句写的是否正确。</li></ul><h5 id="Warning-array-shift-expects-parameter-1-to-be-array-integer-given"><a href="#Warning-array-shift-expects-parameter-1-to-be-array-integer-given" class="headerlink" title="Warning: array_shift() expects parameter 1 to be array, integer given"></a>Warning: array_shift() expects parameter 1 to be array, integer given</h5><ul><li>函数第一个参数必须是一个数组。</li></ul><h5 id="Fatal-error-Unsupported-operand-types-in-file-List-1-php-on-line-60"><a href="#Fatal-error-Unsupported-operand-types-in-file-List-1-php-on-line-60" class="headerlink" title="Fatal error: Unsupported operand types in file\List_1.php on line 60"></a>Fatal error: Unsupported operand types in file\List_1.php on line 60</h5><ul><li>致命错误：不支持的操作数据类型<br>产生原因，将不符合数据类型的数据传送给了某些函数。比如我就不小心将一个数组传给了我的一个自定义函数，而这个函数接受的参数应该是数字。</li></ul><h5 id="Fatal-error-Only-variables-can-be-passed-by-reference-in-……"><a href="#Fatal-error-Only-variables-can-be-passed-by-reference-in-……" class="headerlink" title="Fatal error: Only variables can be passed by reference in ……"></a>Fatal error: Only variables can be passed by reference in ……</h5><ul><li>在PHP里，如果运行以下代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function eee(&amp;$t) &#123; </span><br><span class="line">$w = &apos;hello &apos;.$t; return $w; </span><br><span class="line">&#125; </span><br><span class="line">echo eee(&apos;World&apos;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>意思是“只有变量能通过‘引用’”。</p><h5 id="Warning-Illegal-offset-type-in-isset-or-empty-in"><a href="#Warning-Illegal-offset-type-in-isset-or-empty-in" class="headerlink" title="Warning: Illegal offset type in isset or empty in"></a>Warning: Illegal offset type in isset or empty in</h5><ul><li>前几天写程序的时候碰到一个这种错误提示<br>如果你使用这样的表示方法如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$arr = array();</span><br><span class="line">class a &#123;&#125; </span><br><span class="line">$o = new a;</span><br><span class="line">echo $arr[$o];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>就会出现上面的错误提示，因为不能使用实例化的对象来作为数组的索引，或者在使用isset empty检测这样的数据的时候也会出现第二种情况。<br>如果在做实际中碰到这样的错误提示，查看数组变量的键名是否使用了实例化的对象变量作为键名</li></ul><h5 id="1366-Incorrect-integer-value-‘’-for-column-‘ID’-at-row-1"><a href="#1366-Incorrect-integer-value-‘’-for-column-‘ID’-at-row-1" class="headerlink" title="#1366 - Incorrect integer value: ‘’ for column ‘ID’ at row 1"></a>#1366 - Incorrect integer value: ‘’ for column ‘ID’ at row 1</h5><ul><li>mysql版本为msyql 5.1.14 WIN32版本,出现错误的原因是没有给自增ID赋值,尽管之前的版本可以不赋值,自动增加,但是在新版本的msyql中需要为其赋值NULL</li></ul><h5 id="1136-Column-count-doesn’t-match-value-count-at-row-1"><a href="#1136-Column-count-doesn’t-match-value-count-at-row-1" class="headerlink" title="#1136:Column count doesn’t match value count at row 1"></a>#1136:Column count doesn’t match value count at row 1</h5><ul><li>检查一下有没有序号自增加的字段。</li><li>所存储的数据与数据库表的字段类型定义不相匹配.</li><li>字段类型是否正确, 是否越界, 有无把一种类型的数据存储到另一种数据类型中.</li><li>SQL语句里列的数目和后面的值的数目不一致</li></ul><h5 id="1062-Duplicate-entry-‘…’-for-key-‘map’"><a href="#1062-Duplicate-entry-‘…’-for-key-‘map’" class="headerlink" title="#1062_Duplicate entry ‘…’ for key ‘map’"></a>#1062_Duplicate entry ‘…’ for key ‘map’</h5><ul><li>关键字重复、可能是主键ID、也可能是唯一字段。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PHP常见错误收集&quot;&gt;&lt;a href=&quot;#PHP常见错误收集&quot; class=&quot;headerlink&quot; title=&quot;PHP常见错误收集&quot;&gt;&lt;/a&gt;PHP常见错误收集&lt;/h1&gt;&lt;h5 id=&quot;Fatal-error-Non-static-method-Conn-co
      
    
    </summary>
    
      <category term="php" scheme="https://github.com/yaninor/categories/php/"/>
    
    
      <category term="php" scheme="https://github.com/yaninor/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php与bom头的惨痛经历</title>
    <link href="https://github.com/yaninor/2019/01/12/php/"/>
    <id>https://github.com/yaninor/2019/01/12/php/</id>
    <published>2019-01-12T08:11:48.000Z</published>
    <updated>2019-01-12T08:16:26.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一次“惨痛”的上线bug经历：php与BOM头"><a href="#记一次“惨痛”的上线bug经历：php与BOM头" class="headerlink" title="记一次“惨痛”的上线bug经历：php与BOM头"></a>记一次“惨痛”的上线bug经历：php与BOM头</h1><p> 经验往往是伴随着“惨痛”的教训而来，比如说最近的这次。事情的起因，源于最近的一次上线：手机客户端的“微博视频广场”代码修改上线后，页面突然异常，模块展示各种混乱，整个视频广场都变得“不好了”。。。</p><h4 id="1-查找bug原因"><a href="#1-查找bug原因" class="headerlink" title="1.查找bug原因"></a>1.查找bug原因</h4><p>   有了问题就要查找原因。首先想到的是调用接口返回的数据异常。但是手动调用接口（浏览器调用&amp;终端curl调用），返回的json格式数据都是正确的，接口输出“看起来”没有问题。</p><p>   无奈之下，只得求助于接口调用方，经过不断的打断点调试，终于在接口输出json数据的开头，发现了诡异的“\ufeff”字符（见下图）！！！而恰恰由于这几个字符，导致了接口输出的json串解析失败！<br>   <img src="http://ww2.sinaimg.cn/large/6233c28fjw1emwkpryp0ij20j204m0ua.jpg" alt="image"></p><p>   马上百度之，发现返回结果中都提到了“BOM头”！原来是BOM头捣的鬼！bug的原因终于找到了！</p><p>   也许看到这，你不禁想问什么是BOM头？不要急，下面就跟大家介绍下~</p><h4 id="2-php与BOM头"><a href="#2-php与BOM头" class="headerlink" title="2.php与BOM头"></a>2.php与BOM头</h4><p>   BOM（Byte Order Mark）是一个字节顺序标签，类似一个标记，又叫签名，用来告诉编辑器当前文件采用何种编码，方便编辑器识别。除了unicode编码，一般的编码集并不会出现bom头。对于utf-16和utf-32，如果不指定bom头，解析程序就默认为ansi编码，从而出现乱码；而对于utf-8，BOM头指定与否，解析程序都可判断。</p><p>   现在几乎所有的文本编辑软件都可以显示并编辑UTF-8编码的文件，但其中很多的表现并不理想。类似WINDOWS自带的记事本等软件，在保存一个以UTF-8编码的文件时，会在文件开始的地方插入三个不可见的字符0xEF、0xBB和0xBF，即BOM。对于一般的文件，这样做并不会产生麻烦。但对于 PHP来说，BOM是个大麻烦。因为PHP并不会忽略BOM，所以在读取、包含或者引用这些文件时，会把BOM作为该文件开头正文的一部分。同时根据嵌入式语言的特点，这串字符最终将被直接执行（显示）出来。</p><p>   回到我们的问题中，由于有个配置文件在开发时用WINDOWS自带的记事本编辑保存过，导致这个文件在开头加入了BOM头，而这个配置文件在各个php接口脚本中都被读取过，从而导致接口输出的json格式数据前面多了BOM头。</p><h4 id="3-bug解决办法"><a href="#3-bug解决办法" class="headerlink" title="3.bug解决办法"></a>3.bug解决办法</h4><p>   找到了问题原因，解决方法就很简单了：把utf-8编码文件的BOM头去掉。可以编写程序，检测文件头的三个字符是否为0xEF、0xBB和0xBF，如果是的话，直接删除掉即可；也可以用下文提到的靠谱的编辑器，打开文件重新编辑，设置为无BOM头的utf-8编码。例如Notepad++的使用如下图：</p><p>  <img src="http://ww2.sinaimg.cn/large/6233c28fjw1emwkqytdpjj20dx08ugoc.jpg" alt="image"></p><h4 id="4-经验总结"><a href="#4-经验总结" class="headerlink" title="4.经验总结"></a>4.经验总结</h4><p>   写到这里回头看，其实问题的原因很简单，但却很隐蔽，导致排查问题、查找原因的过程十分痛苦纠结。事后我也在不断思考，试图去总结些普遍试用的经验教训，以避免同类问题的再次发生。以下是一点浅见。</p><p>   最最重要的教训，就是不要忽略测试！这里说的测试，不是自己开发完自己测，而是由QA，在上线前执行标准化的测试流程！这也是避免非环境原因导致隐蔽bug的有效措施之一！</p><p>   其次，就是上线前通过svn合代码进行code review时，不忽视任何细小的改动。BOM头是在文件开头添加了3个字符，在新旧代码的对比中，其实这种改动svn也会检测出来；但限于svn编辑器无法显示BOM头，直观的看，文件的开头好像多了个空格，但实际什么都没有。遇到这种情况，很大可能性就是BOM头捣的鬼！</p><p>   此外，在编辑、更改任何文本文件时，不要使用乱加BOM的编辑器！尤其是WINDOWS下，不要使用记事本做编辑器！！！</p><p>推荐几个靠谱的编辑器：Editplus，Notepad++，EmEditor，UltraEdit，Dreamweaver（需要取消‘添加BOM’的相关选项）等。</p><h4 id="5-BOM头对php程序的其他危害"><a href="#5-BOM头对php程序的其他危害" class="headerlink" title="5.BOM头对php程序的其他危害"></a>5.BOM头对php程序的其他危害</h4><p>   BOM头对php程序的危害，最典型、最严重的，还不是上文提到的情况。如果在涉及到COOKIE实现的php文件中有BOM头，由于在COOKIE送出前PHP已经送出了文件头，那么受COOKIE送出机制的限制，COOKIE将无法送出，导致登入和登出功能失效！一切依赖COOKIE、SESSION实现的功能都将无效！</p><p>   另外一个典型危害：如果php程序实现xml格式的数据输出，并且php文件有BOM头，那么会造成输出的xml格式数据解析失败！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;记一次“惨痛”的上线bug经历：php与BOM头&quot;&gt;&lt;a href=&quot;#记一次“惨痛”的上线bug经历：php与BOM头&quot; class=&quot;headerlink&quot; title=&quot;记一次“惨痛”的上线bug经历：php与BOM头&quot;&gt;&lt;/a&gt;记一次“惨痛”的上线bug经
      
    
    </summary>
    
      <category term="php" scheme="https://github.com/yaninor/categories/php/"/>
    
    
      <category term="php" scheme="https://github.com/yaninor/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Git 重写历史</title>
    <link href="https://github.com/yaninor/2019/01/12/Git%20%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2/"/>
    <id>https://github.com/yaninor/2019/01/12/Git 重写历史/</id>
    <published>2019-01-12T08:05:56.000Z</published>
    <updated>2019-01-12T08:38:57.974Z</updated>
    
    <content type="html"><![CDATA[<p>许多时候，在使用 Git 时，可能会因为某些原因想要修正提交历史。Git 允许重写已经发生的提交，这可能涉及改变提交的顺序，改变提交中的信息或修改文件，将提交压缩或是拆分，或完全地移除提交。</p><h1 id="1-修改最后一次提交"><a href="#1-修改最后一次提交" class="headerlink" title="1 修改最后一次提交"></a>1 修改最后一次提交</h1><p>修改最近一次提交可能是所有修改历史提交的操作中最常见的一个。对于最近一次提交，往往想做两件事情：修改提交信息，或者修改你添加、修改和移除的文件的快照。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><p>这会把你带入文本编辑器，里面包含了你最近一条提交信息，供你修改。当保存并关闭编辑器后，编辑器将会用你输入的内容替换最近一条提交信息。</p><p>使用 Sourcetree 打开项目会发现有两个 master，检查最新的 master 分支无误后，执行强制推送远端命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master -f</span><br></pre></td></tr></table></figure><h1 id="2-修改多个提交信息"><a href="#2-修改多个提交信息" class="headerlink" title="2 修改多个提交信息"></a>2 修改多个提交信息</h1><p>修改在提交历史中较远的提交，必须使用更复杂的工具。 Git 没有一个改变历史工具，但是可以使用变基工具来变基一系列提交，基于它们原来的 HEAD 而不是将其移动到另一个新的上面。可以通过给 git rebase 增加 -i 选项来交互式地运行变基。 必须指定想要重写多久远的历史，这可以通过告诉命令将要变基到的提交来做到。</p><p>修改最近的两次提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase HEAD~2 -i</span><br></pre></td></tr></table></figure><blockquote><p>也可以直接指定 commit 跳转 <code>git rebase f20830d -i</code></p></blockquote><p>运行这个命令会在文本编辑器上给你一个提交的列表，看起来像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pick cedeedc no1 message</span><br><span class="line">pick f20830d no message</span><br><span class="line"></span><br><span class="line"># Rebase 3d1e0ad..f20830d onto 3d1e0ad (2 commands)</span><br><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line"># p, pick = use commit</span><br><span class="line"># r, reword = use commit, but edit the commit message</span><br><span class="line"># e, edit = use commit, but stop for amending</span><br><span class="line"># s, squash = use commit, but meld into previous commit</span><br><span class="line"># f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message</span><br><span class="line"># x, exec = run command (the rest of the line) using shell</span><br><span class="line"># d, drop = remove commit</span><br><span class="line">#</span><br><span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line">#</span><br><span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line">#</span><br><span class="line"># However, if you remove everything, the rebase will be aborted.</span><br><span class="line">#</span><br><span class="line"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure><p>需要注意的是这里展示的提交顺序是由 HEAD~2 到 HEAD。修改脚本可以将 pick 修改为 Commands 提示的如 reword、edit 修改提交的日志。还可以使用 squash、fixup 合并提交。</p><p>将倒数第二个提交，使用 edit 编辑后，如下所示。</p><blockquote><p>如果只修改信息建议使用 reword 命令。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">edit cedeedc no1 message</span><br><span class="line">pick f20830d no message</span><br></pre></td></tr></table></figure><p>当保存并退出(:wq)编辑后，Git会提交如下信息 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase HEAD~2 -i</span><br><span class="line">Stopped at 57f3a5b...  no1yj message</span><br><span class="line">You can amend the commit now, with</span><br><span class="line"></span><br><span class="line">  git commit --amend </span><br><span class="line"></span><br><span class="line">Once you are satisfied with your changes, run</span><br><span class="line"></span><br><span class="line">  git rebase --continue</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><p>编辑提交信息，然后，运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --continue</span><br></pre></td></tr></table></figure><p>这个命令将会自动地应用另外一个提交，然后就完成了。</p><p>最后使用 Sourcetree 打开项目，检查最新的 master 分支和对应的 tag 无误后，执行强制推送远端命令。</p><h1 id="3-修改提交邮箱地址"><a href="#3-修改提交邮箱地址" class="headerlink" title="3 修改提交邮箱地址"></a>3 修改提交邮箱地址</h1><p>通过 filter-branch 可以一次性修改多个提交中的邮箱地址。需要注意只修改自己的邮箱地址，所以你使用 –commit-filter：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git filter-branch --commit-filter &apos;</span><br><span class="line">        if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;schacon@localhost&quot; ];</span><br><span class="line">        then</span><br><span class="line">                GIT_AUTHOR_NAME=&quot;Scott Chacon&quot;;</span><br><span class="line">                GIT_AUTHOR_EMAIL=&quot;schacon@example.com&quot;;</span><br><span class="line">                git commit-tree &quot;$@&quot;;</span><br><span class="line">        else</span><br><span class="line">                git commit-tree &quot;$@&quot;;</span><br><span class="line">        fi&apos; HEAD</span><br></pre></td></tr></table></figure><p>全部更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git filter-branch --commit-filter &apos;GIT_AUTHOR_NAME=&quot;阳君&quot;;GIT_AUTHOR_EMAIL=&quot;937447973@qq.com&quot;;git commit-tree &quot;$@&quot;;fi&apos; HEAD</span><br></pre></td></tr></table></figure><p>&#160;</p><hr><h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><h2 id="Related-Documentation"><a href="#Related-Documentation" class="headerlink" title="Related Documentation"></a>Related Documentation</h2><p><a href="https://git-scm.com/book/zh/v2/Git-工具-重写历史" target="_blank" rel="noopener">Git 工具 - 重写历史</a></p><h2 id="Copyright"><a href="#Copyright" class="headerlink" title="Copyright"></a>Copyright</h2><p>CSDN：<a href="http://blog.csdn.net/y550918116j" target="_blank" rel="noopener">http://blog.csdn.net/y550918116j</a></p><p>GitHub：<a href="https://github.com/937447974">https://github.com/937447974</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;许多时候，在使用 Git 时，可能会因为某些原因想要修正提交历史。Git 允许重写已经发生的提交，这可能涉及改变提交的顺序，改变提交中的信息或修改文件，将提交压缩或是拆分，或完全地移除提交。&lt;/p&gt;
&lt;h1 id=&quot;1-修改最后一次提交&quot;&gt;&lt;a href=&quot;#1-修改最后一
      
    
    </summary>
    
      <category term="git" scheme="https://github.com/yaninor/categories/git/"/>
    
    
      <category term="git" scheme="https://github.com/yaninor/tags/git/"/>
    
      <category term="github" scheme="https://github.com/yaninor/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>git 生成SSH key</title>
    <link href="https://github.com/yaninor/2019/01/12/key/"/>
    <id>https://github.com/yaninor/2019/01/12/key/</id>
    <published>2019-01-12T08:02:46.000Z</published>
    <updated>2019-01-12T08:39:14.387Z</updated>
    
    <content type="html"><![CDATA[<p>使用git的过程中，我们会初始化创建关联服务器的SSH key.</p><h1 id="1-设置用户名和邮箱"><a href="#1-设置用户名和邮箱" class="headerlink" title="1 设置用户名和邮箱"></a>1 设置用户名和邮箱</h1><p>开发过程中，提交的时候会在log中显示用户名和密码，便于管理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;阳君&quot;</span><br><span class="line">$ git config --global user.email &quot;937447974@qq.com&quot;</span><br></pre></td></tr></table></figure><h1 id="2-检查现有的SSH-keys"><a href="#2-检查现有的SSH-keys" class="headerlink" title="2 检查现有的SSH keys"></a>2 检查现有的SSH keys</h1><p>在创建SSH keys之前，我们可以看看电脑内是否有SSH keys秘钥。</p><p>打开Terminal输入如下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure><p>或输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls ~/.ssh</span><br></pre></td></tr></table></figure><p>如果看见如下文件，则代表SSH keys已创建好。</p><ol><li>id_dsa.pub</li><li>id_ecdsa.pub</li><li>id_ed25519.pub</li><li>id_rsa.pub</li></ol><p>查看已创建好的SSH key，使用如下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h1 id="3-生成新的SSH-key"><a href="#3-生成新的SSH-key" class="headerlink" title="3 生成新的SSH key"></a>3 生成新的SSH key</h1><p>如果没创建SSH key，我们可以创建新的SSH key。</p><p>1 设置电子邮件并创建对应的key </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br><span class="line"># Creates a new ssh key, using the provided email as a label</span><br><span class="line">Generating public/private rsa key pair.</span><br></pre></td></tr></table></figure><p>2 设置文件存储位置，直接“回车”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure><p>3 设置密码时，可设置空密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><h1 id="4-添加SSH-key到ssh-agent"><a href="#4-添加SSH-key到ssh-agent" class="headerlink" title="4 添加SSH key到ssh-agent"></a>4 添加SSH key到ssh-agent</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># start the ssh-agent in the background</span><br><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line">Agent pid 59566</span><br><span class="line"></span><br><span class="line">$ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>此时SSH key创建完毕。</p><p>&#160;</p><hr><h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><h2 id="Related-Documentation"><a href="#Related-Documentation" class="headerlink" title="Related Documentation"></a>Related Documentation</h2><p><a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="noopener">Generating an SSH key</a></p><h2 id="Revision-History"><a href="#Revision-History" class="headerlink" title="Revision History"></a>Revision History</h2><table><thead><tr><th>时间</th><th>描述</th></tr></thead><tbody><tr><td>2016-03-01</td><td>博文完成</td></tr></tbody></table><h2 id="Copyright"><a href="#Copyright" class="headerlink" title="Copyright"></a>Copyright</h2><p>CSDN：<a href="http://blog.csdn.net/y550918116j" target="_blank" rel="noopener">http://blog.csdn.net/y550918116j</a></p><p>GitHub：<a href="https://github.com/937447974/Blog">https://github.com/937447974/Blog</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用git的过程中，我们会初始化创建关联服务器的SSH key.&lt;/p&gt;
&lt;h1 id=&quot;1-设置用户名和邮箱&quot;&gt;&lt;a href=&quot;#1-设置用户名和邮箱&quot; class=&quot;headerlink&quot; title=&quot;1 设置用户名和邮箱&quot;&gt;&lt;/a&gt;1 设置用户名和邮箱&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="git" scheme="https://github.com/yaninor/categories/git/"/>
    
    
      <category term="git" scheme="https://github.com/yaninor/tags/git/"/>
    
      <category term="github" scheme="https://github.com/yaninor/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Git commit 规范</title>
    <link href="https://github.com/yaninor/2019/01/11/My-New-Post/"/>
    <id>https://github.com/yaninor/2019/01/11/My-New-Post/</id>
    <published>2019-01-11T12:28:01.000Z</published>
    <updated>2019-01-12T08:00:22.073Z</updated>
    
    <content type="html"><![CDATA[<p>在多人协作项目中，良好的 commit 风格如下所示</p><p><img src="https://raw.githubusercontent.com/937447974/Blog/master/Resources/2018072501.png" alt=""></p><p>这里使用的工具是 commitlint。</p><h1 id="1-Commitlint-message-的格式"><a href="#1-Commitlint-message-的格式" class="headerlink" title="1 Commitlint message 的格式"></a>1 Commitlint message 的格式</h1><p>Commitlint 基于 Angular 的规范。很多工具也是基于此规范, 它的 message 格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Header</span><br><span class="line">&lt;type&gt;(scope): &lt;subject&gt;</span><br><span class="line">// 空一行</span><br><span class="line">Body</span><br><span class="line">// 空一行</span><br><span class="line">Footer</span><br></pre></td></tr></table></figure><p>Header 是必需的，注意冒号后面有空格，Body 和 Footer 可以省略。</p><ol><li>Header：Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）<ol><li>type：用于说明 commit 的类型，被指定在 commitlint.config.js 的 type-enum。</li><li>scope: 用于说明 commit 的影响范围，可以省略。</li><li>subject：subject 是 commit 目的的简短描述，不超过50个字符，且结尾不加句号（.）。</li></ol></li><li>Body: body 部分是对本次 commit 的描述，可以分成多行。</li><li>Footer: footer 用于不兼容变动和关闭ISSUE。</li></ol><h1 id="2-Commitlint-安装"><a href="#2-Commitlint-安装" class="headerlink" title="2 Commitlint 安装"></a>2 Commitlint 安装</h1><h2 id="2-1-commitlint-config-js"><a href="#2-1-commitlint-config-js" class="headerlink" title="2.1 commitlint.config.js"></a>2.1 commitlint.config.js</h2><p>git 根目录新建 commitlint.config.js 文件，添加如下代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    extends: [&apos;@commitlint/config-conventional&apos;],</span><br><span class="line">    rules: &#123;</span><br><span class="line">        &apos;subject-case&apos;: [0, &apos;never&apos;],</span><br><span class="line">        &apos;type-enum&apos;: [</span><br><span class="line">            2,</span><br><span class="line">            &apos;always&apos;,</span><br><span class="line">            [</span><br><span class="line">                &quot;docs&quot;,     // Adds or alters documentation. 仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等</span><br><span class="line">                &quot;chore&quot;,    // Other changes that don&apos;t modify src or test files. 改变构建流程、或者增加依赖库、工具等</span><br><span class="line">                &quot;feat&quot;,     // Adds a new feature. 新增feature</span><br><span class="line">                &quot;fix&quot;,      // Solves a bug. 修复bug</span><br><span class="line">                &quot;merge&quot;,    // Merge branch ? of ?.</span><br><span class="line">                &quot;perf&quot;,     // Improves performance. 优化相关，比如提升性能、体验</span><br><span class="line">                &quot;refactor&quot;, // Rewrites code without feature, performance or bug changes. 代码重构，没有加新功能或者修复bug</span><br><span class="line">                &quot;revert&quot;,    // Reverts a previous commit. 回滚到上一个版本                </span><br><span class="line">                &quot;style&quot;,    // Improves formatting, white-space. 仅仅修改了空格、格式缩进、都好等等，不改变代码逻辑                </span><br><span class="line">                &quot;test&quot;     // Adds or modifies tests. 测试用例，包括单元测试、集成测试等                </span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-2-package-json"><a href="#2-2-package-json" class="headerlink" title="2.2 package.json"></a>2.2 package.json</h2><p>命令行进入 git 根目录，执行 <code>npm init</code> 创建 package.json。</p><p>打开 package.json 粘贴如下代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;commitmsg&quot;: &quot;commitlint -E GIT_PARAMS&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行命令 <code>npm install --save-dev @commitlint/{cli,config-conventional} husky</code> 安装 commitlint 和 husky。</p><p>安装完毕后，打开 package.json 后如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;yjcocoa&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;8.3.0&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;YJ系列开源库&quot;,</span><br><span class="line">    &quot;author&quot;: &quot;阳君&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;homepage&quot;: &quot;https://github.com/937447974/YJCocoa&quot;,</span><br><span class="line">    &quot;repository&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;https://github.com/937447974/YJCocoa.git&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;bugs&quot;: &#123;</span><br><span class="line">        &quot;url&quot;: &quot;https://github.com/937447974/YJCocoa/issues&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;main&quot;: &quot;commitlint.config.js&quot;,</span><br><span class="line">    &quot;devDependencies&quot;: &#123;</span><br><span class="line">        &quot;@commitlint/cli&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">        &quot;@commitlint/config-conventional&quot;: &quot;^7.0.1&quot;,</span><br><span class="line">        &quot;husky&quot;: &quot;^0.14.3&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;scripts&quot;: &#123;</span><br><span class="line">        &quot;commitmsg&quot;: &quot;commitlint -E GIT_PARAMS&quot;,</span><br><span class="line">        &quot;commit&quot;: &quot;commit&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行测试命令如下所示，验证 commitlint 是否起效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p align=&quot;center&quot;&gt;</span><br><span class="line">  &lt;img width=&quot;600&quot; src=&quot;https://cdn.rawgit.com/marionebl/commitlint/3594397919c6188ce31ccfc94a0113d625d55516/docs/assets/commitlint.svg&quot;&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><br>测试通过后，将 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Node</span><br><span class="line">node_modules/</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure><p>添加到 .gitignore，检查本地代码后提交并推送到服务器。</p><p>团队其他人员 pull 代码后，命令行进入 git 根目录执行 npm install 即可使用 commitlint 提交规范。</p><p>&#160;</p><hr><h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><h2 id="Related-Documentation"><a href="#Related-Documentation" class="headerlink" title="Related Documentation"></a>Related Documentation</h2><p><a href="http://marionebl.github.io/commitlint/#/" target="_blank" rel="noopener">commitlint</a></p><p><a href="https://blog.csdn.net/y491887095/article/details/80594043" target="_blank" rel="noopener">git commit 提交规范 &amp; 规范校验</a></p><p><a href="https://www.colabug.com/1744239.html" target="_blank" rel="noopener">Git Commint规范</a></p><h2 id="Copyright"><a href="#Copyright" class="headerlink" title="Copyright"></a>Copyright</h2><p>CSDN：<a href="http://blog.csdn.net/y550918116j" target="_blank" rel="noopener">http://blog.csdn.net/y550918116j</a></p><p>GitHub：<a href="https://github.com/937447974">https://github.com/937447974</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在多人协作项目中，良好的 commit 风格如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/937447974/Blog/master/Resources/2018072501.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="git" scheme="https://github.com/yaninor/categories/git/"/>
    
    
      <category term="git" scheme="https://github.com/yaninor/tags/git/"/>
    
      <category term="github" scheme="https://github.com/yaninor/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/yaninor/2019/01/11/hello-world/"/>
    <id>https://github.com/yaninor/2019/01/11/hello-world/</id>
    <published>2019-01-11T12:25:01.603Z</published>
    <updated>2019-01-11T12:25:01.603Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
